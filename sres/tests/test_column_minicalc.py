import unittest
import time
import datetime
import os
import re
import json

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.select import Select
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.alert import Alert
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.remote.command import Command

from sres.tests import config
from sres.tests import utils as test_utils

options = Options()
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('window-size=1600,900')

class TestBase(unittest.TestCase):
    
    def setUp(self):
        self.driver = webdriver.Chrome(config.CHROMEDRIVER_PATH, chrome_options=options)
        
        # Create test users
        self.list_admin = test_utils.create_test_user(['list', 'filter'])
        assert self.list_admin['username'] and self.list_admin['password']
        self.list_user = test_utils.create_test_user([])
        assert self.list_user['username'] and self.list_user['password']
        self.list_student = test_utils.create_test_user(['student'])
        assert self.list_student['username'] and self.list_student['password']
        
        self.driver.get(config.URL_BASE)
        self.driver.find_element_by_id('loginUsername').send_keys(self.list_admin['username'])
        self.driver.find_element_by_id('loginPassword').send_keys(self.list_admin['password'])
        self.driver.find_element_by_id('login_button').click()
        assert "SRES" in self.driver.title
        assert self.list_admin['username'] in self.driver.find_element_by_id('logged_in_username').text
        time.sleep(2)
        
    def tearDown(self):
        self.driver.quit()
    
class TestColumnMultientryMinicalc(TestBase):
    
    def _sendkeys_for_column_edit(self, column_name, column_type, column_description=None):
        
        self.driver.find_element_by_id('columnname').send_keys(column_name)
        self.driver.find_element_by_id('columndescription').send_keys(
            column_description if column_description else "Generated by testing suite"
        )
        for date_button in self.driver.find_elements_by_class_name('sres-date-shortcut-today'):
            if date_button.is_displayed():
                date_button.click()
        self.driver.find_element_by_id('dataType-' + column_type).click()
    
    def _sendkeys_for_multientry_selectable_options(self, n, options):
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_editor_select_' + str(n))
        time.sleep(0.5)
        
        assert self.driver.find_element_by_id('modal_select_from_list_editor').is_displayed()
        
        for option in options:
            self.driver.find_element_by_id('select_from_list_add_option').click()
            
        display_inputs = self.driver.find_elements_by_css_selector('.sres-select-from-list-row:not(.d-none) .sres-select-from-list-row-display')
        for i, el in enumerate(display_inputs):
            if 'display' in options[i]:
                test_utils.move_to_element(self.driver, el)
                el.send_keys(options[i]['display'])
        
        value_inputs = self.driver.find_elements_by_css_selector('.sres-select-from-list-row:not(.d-none) .sres-select-from-list-row-value')
        for i, el in enumerate(value_inputs):
            if 'value' in options[i]:
                test_utils.move_to_element(self.driver, el)
                el.send_keys(options[i]['value'])
            
        more_toggle_inputs = self.driver.find_elements_by_css_selector('.sres-select-from-list-row:not(.d-none) .sres-select-from-list-row-more-options-toggle')
        for i, el in enumerate(more_toggle_inputs):
            test_utils.move_to_element(self.driver, el)
            el.click()
        description_inputs = self.driver.find_elements_by_css_selector('.sres-select-from-list-row:not(.d-none) .sres-select-from-list-row-description')
        for i, el in enumerate(description_inputs):
            if options[i]['description']:
                el.send_keys(options[i]['description'])
        
        test_utils.move_to_click_element_by_id(self.driver, 'modal_select_from_list_editor_confirm')
        time.sleep(0.2)
        
        assert not self.driver.find_element_by_id('modal_select_from_list_editor').is_displayed()
    
    def test_column_multientry_minicalc(self):
        
        from sres.tests import test_list_crud
        _id, new_list_uuid = test_list_crud.TestListCRUD._create_list(self)
        assert new_list_uuid
        print('Created new list ' + new_list_uuid)
        
        test_utils.add_student_to_list(self.driver, new_list_uuid, self.list_student['user'])
        test_utils.add_user_to_list(self.driver, new_list_uuid, self.list_user['user'])
        
        #############################
        # Create multi-entry column 1
        #############################
        new_multientry_column_name_1 = "Multientry minicalc test 1"
        print('Creating multientry column: ' + new_multientry_column_name_1)
        self.driver.get(f'{config.URL_BASE}/tables/{new_list_uuid}/columns/new/standard')
        self._sendkeys_for_column_edit(column_name=new_multientry_column_name_1, column_type="multiEntry")
        
        n = 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Verbal communication skill')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'slider')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': 'Five',
                    'value': '5',
                    'description': ''
                },
                {
                    'display': 'Ten',
                    'value': '10',
                    'description': ''
                },
                {
                    'display': 'Fifteen',
                    'value': '15',
                    'description': ''
                }
            ]
        )
        test_utils.select_by_value_in_element_by_id(self.driver, 'multi_entry_slider_mode_' + str(n), 'numeric-free')
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Presentation slide quality')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'dropdown')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': 'One',
                    'value': '1',
                    'description': ''
                },
                {
                    'display': 'Two',
                    'value': '2',
                    'description': ''
                },
                {
                    'display': 'Three',
                    'value': '3',
                    'description': ''
                }
            ]
        )
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Sum of component marks for verbal and slides')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'regex')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_render_calculated_value_' + str(n), 'yes')
        time.sleep(0.3)
        test_utils.move_to_click_element_by_css_selector(self.driver, f'#multi_entry_{n} button.sres-multientry-render-calculated-value-config-button')
        WebDriverWait(self.driver, 2).until(lambda x: x.find_element_by_css_selector('#modal_render_calculated_values_editor').is_displayed())
        assert "Verbal communication skill" == self.driver.find_element_by_css_selector("label[for='render_calculated_values_editor_subfield_list_item_0']").text
        assert "Presentation slide quality" == self.driver.find_element_by_css_selector("label[for='render_calculated_values_editor_subfield_list_item_1']").text
        self.driver.find_element_by_css_selector("label[for='render_calculated_values_editor_subfield_list_item_0']").click()
        self.driver.find_element_by_css_selector("label[for='render_calculated_values_editor_subfield_list_item_1']").click()
        test_utils.select_by_value_in_element_by_id(self.driver, 'render_calculated_values_editor_method', 'sum')
        test_utils.select_by_value_in_element_by_id(self.driver, 'render_calculated_values_editor_blank_treatment', 'convertzero')
        test_utils.select_by_value_in_element_by_id(self.driver, 'render_calculated_values_editor_rounding', '1')
        self.driver.find_element_by_id('modal_render_calculated_values_editor_confirm').click()
        time.sleep(0.3)
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Overall impression of quality')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'select')
        time.sleep(0.3)
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_select_mode_' + str(n), 'multiple')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': 'One',
                    'value': '1',
                    'description': ''
                },
                {
                    'display': 'Four',
                    'value': '4',
                    'description': ''
                },
                {
                    'display': 'Eight',
                    'value': '8',
                    'description': ''
                },
                {
                    'display': 'Twelve',
                    'value': '12',
                    'description': ''
                }
            ]
        )
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Overall grade (average of impression and component marks)')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'slider')
        time.sleep(0.5)
        test_utils.select_by_value_in_element_by_id(self.driver, 'multi_entry_slider_mode_' + str(n), 'numeric-free')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': '0',
                    'value': '0',
                    'description': ''
                },
                {
                    'display': '15',
                    'value': '15',
                    'description': ''
                }
            ]
        )
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_render_calculated_value_' + str(n), 'yes')
        time.sleep(0.3)
        test_utils.move_to_click_element_by_css_selector(self.driver, f'#multi_entry_{n} button.sres-multientry-render-calculated-value-config-button')
        WebDriverWait(self.driver, 2).until(lambda x: x.find_element_by_css_selector('#modal_render_calculated_values_editor').is_displayed())
        assert "Sum of component marks for verbal and slides" == self.driver.find_element_by_css_selector("label[for='render_calculated_values_editor_subfield_list_item_2']").text
        assert "Overall impression of quality" == self.driver.find_element_by_css_selector("label[for='render_calculated_values_editor_subfield_list_item_3']").text
        self.driver.find_element_by_css_selector("label[for='render_calculated_values_editor_subfield_list_item_2']").click()
        self.driver.find_element_by_css_selector("label[for='render_calculated_values_editor_subfield_list_item_3']").click()
        test_utils.select_by_value_in_element_by_id(self.driver, 'render_calculated_values_editor_method', 'average')
        test_utils.select_by_value_in_element_by_id(self.driver, 'render_calculated_values_editor_blank_treatment', 'ignore')
        test_utils.select_by_value_in_element_by_id(self.driver, 'render_calculated_values_editor_rounding', '3')
        self.driver.find_element_by_id('modal_render_calculated_values_editor_confirm').click()
        time.sleep(0.3)
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'btn_show_advanced_settings')
        test_utils.select_by_value_in_element_by_id(self.driver, 'custom_options_rollview_popout_editor', 'popout')        
        test_utils.select_by_value_in_element_by_id(self.driver, 'permissions_edit_mode_student', 'self')        
        test_utils.select_by_value_in_element_by_id(self.driver, 'custom_options_student_direct_access', 'single,roll')        
        
        test_utils.move_to_click_element_by_id(self.driver, 'submitButton')
        assert "Column configuration successfully updated" in self.driver.page_source
        new_multientry_column_uuid_1 = re.findall('COL_[A-F0-9a-f_]+', self.driver.current_url)[0]
        assert new_multientry_column_uuid_1
        print('Created new multientry column 1 ' + new_multientry_column_uuid_1)
        
        ######################################
        # Test column 1 in data entry modes
        ######################################
        
        # test multientry column 1 single mode
        print(f"Testing multientry column 1 data entry single: {new_multientry_column_name_1}")
        self.driver.get(f'{config.URL_BASE}/entry/table/{new_list_uuid}/columns/{new_multientry_column_uuid_1}/single')
        assert new_multientry_column_name_1 in self.driver.page_source
        self.driver.find_element_by_id('search_student_term').send_keys('999888789')
        WebDriverWait(self.driver, 10).until(lambda x: x.find_element_by_class_name('aa-with-search-results').is_displayed())
        self.driver.find_element_by_id('search_student_term').send_keys(Keys.ENTER)
        assert "Hai Basham" in self.driver.page_source
        time.sleep(1)
        # interact with slider 1
        self.driver.find_elements_by_class_name('irs-handle')[0].click()
        ActionChains(self.driver).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).perform()
        # interact with single dropdown 2
        _elem = self.driver.find_element_by_css_selector(f"button[data-id='{new_multientry_column_uuid_1}_1_999888789']")
        ActionChains(self.driver).move_to_element(_elem).click(_elem).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.ENTER).perform()
        time.sleep(0.2)
        # check first minicalc
        assert '10.0' == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_2_999888789').get_property('value')
        # interact with multi button
        _elem = self.driver.find_element_by_css_selector(f"button.sres-addvalue-multientry-button[data-sres-value='4'][data-sres-columnuuid='{new_multientry_column_uuid_1}']")
        test_utils.move_to_click_element(self.driver, _elem)
        _elem = self.driver.find_element_by_css_selector(f"button.sres-addvalue-multientry-button[data-sres-value='8'][data-sres-columnuuid='{new_multientry_column_uuid_1}']")
        test_utils.move_to_click_element(self.driver, _elem)
        time.sleep(0.2)
        # check second minicalc
        assert '7' == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_4_999888789').get_property('value')
        # save
        self.driver.find_element_by_css_selector('button.sres-addvalue-btn-save.sres-addvalue-save').click()
        WebDriverWait(self.driver, 5).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(self.driver, 5).until(lambda x: "Successfully saved to server for 999888789" in x.page_source)
        assert "Successfully saved to server for 999888789" in self.driver.page_source
        # check the saved data
        _saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid_1, '999888789')
        _saved_data = json.loads(_saved_data)
        assert _saved_data[0] == '8'
        assert _saved_data[1] == '2'
        assert _saved_data[2] == '10.0'
        assert _saved_data[3] == ['4', '8']
        assert _saved_data[4] == '7.333'
        # reload and check
        self.driver.refresh()
        assert '8' == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_0_999888789').get_property('value')
        assert '10.0' == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_2_999888789').get_property('value')
        assert '7' == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_4_999888789').get_property('value') #7.333 renders as 7 since step=1 on this slider
        
        # test multientry column roll mode - popout
        print(f"Testing multientry 1 column data entry roll: {new_multientry_column_name_1}")
        self.driver.get(f'{config.URL_BASE}/entry/table/{new_list_uuid}/columns/{new_multientry_column_uuid_1}/roll')
        self.driver.find_element_by_css_selector("tr[data-sres-identifier='999888795'] button.sres-trigger-editor-popout").click()
        time.sleep(0.5)
        assert '999888795' == self.driver.find_element_by_css_selector("#apply_data_to_all_modal .modal-title").text
        # interact with slider 1
        self.driver.find_elements_by_class_name('irs-handle')[0].click()
        ActionChains(self.driver).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).perform()
        # interact with single dropdown 2
        _elem = self.driver.find_element_by_css_selector(f"button[data-id='{new_multientry_column_uuid_1}_1_']")
        ActionChains(self.driver).move_to_element(_elem).click(_elem).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.ENTER).perform()
        time.sleep(0.2)
        # check first minicalc
        assert '9.0' == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_2_').get_property('value')
        # interact with multi button
        _elem = self.driver.find_element_by_css_selector(f"button.sres-addvalue-multientry-button[data-sres-value='1'][data-sres-columnuuid='{new_multientry_column_uuid_1}']")
        test_utils.move_to_click_element(self.driver, _elem)
        # check second minicalc
        assert '5' == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_4_').get_property('value')
        # save
        self.driver.find_element_by_css_selector('button.sres-addvalue-btn-save.sres-addvalue-save').click()
        WebDriverWait(self.driver, 5).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(self.driver, 5).until(lambda x: "Successfully saved to server for 999888795" in x.page_source)
        assert "Successfully saved to server for 999888795" in self.driver.page_source
        # check the saved data
        _saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid_1, '999888795')
        _saved_data = json.loads(_saved_data)
        assert _saved_data[0] == '8'
        assert _saved_data[1] == '1'
        assert _saved_data[2] == '9.0'
        assert _saved_data[3] == ['1']
        assert _saved_data[4] == '5.000'
        # reload and check
        self.driver.refresh()
        self.driver.find_element_by_css_selector("tr[data-sres-identifier='999888795'] button.sres-trigger-editor-popout").click()
        time.sleep(0.5)
        assert '999888795' == self.driver.find_element_by_css_selector("#apply_data_to_all_modal .modal-title").text
        assert '9.0' == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_2_').get_property('value')
        assert '5' == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_4_').get_property('value') #5.000 renders as 5 since step=1 on this slider
        
        #############################
        # Create multi-entry column 2
        #############################
        new_multientry_column_name_2 = "Multientry minicalc test 2"
        print('Creating multientry column: ' + new_multientry_column_name_2)
        self.driver.get(config.URL_BASE + '/tables/' + new_list_uuid + '/columns/new/standard')
        self._sendkeys_for_column_edit(column_name=new_multientry_column_name_2, column_type="multiEntry")
        
        n = 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Verbal communication skill')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'slider')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': 'Five',
                    'value': '5',
                    'description': ''
                },
                {
                    'display': 'Ten',
                    'value': '10',
                    'description': ''
                },
                {
                    'display': 'Fifteen',
                    'value': '15',
                    'description': ''
                }
            ]
        )
        test_utils.select_by_value_in_element_by_id(self.driver, 'multi_entry_slider_mode_' + str(n), 'numeric-free')
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Presentation slide quality')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'dropdown')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': 'One',
                    'value': '1',
                    'description': ''
                },
                {
                    'display': 'Two',
                    'value': '2',
                    'description': ''
                },
                {
                    'display': 'Three',
                    'value': '3',
                    'description': ''
                }
            ]
        )
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Average of component marks for verbal and slides')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'regex')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_render_calculated_value_' + str(n), 'yes')
        time.sleep(0.3)
        test_utils.move_to_click_element_by_css_selector(self.driver, f'#multi_entry_{n} button.sres-multientry-render-calculated-value-config-button')
        WebDriverWait(self.driver, 2).until(lambda x: x.find_element_by_css_selector('#modal_render_calculated_values_editor').is_displayed())
        assert "Verbal communication skill" == self.driver.find_element_by_css_selector("label[for='render_calculated_values_editor_subfield_list_item_0']").text
        assert "Presentation slide quality" == self.driver.find_element_by_css_selector("label[for='render_calculated_values_editor_subfield_list_item_1']").text
        self.driver.find_element_by_css_selector("label[for='render_calculated_values_editor_subfield_list_item_0']").click()
        self.driver.find_element_by_css_selector("label[for='render_calculated_values_editor_subfield_list_item_1']").click()
        test_utils.select_by_value_in_element_by_id(self.driver, 'render_calculated_values_editor_method', 'average')
        test_utils.select_by_value_in_element_by_id(self.driver, 'render_calculated_values_editor_blank_treatment', 'ignore')
        test_utils.select_by_value_in_element_by_id(self.driver, 'render_calculated_values_editor_rounding', '1')
        self.driver.find_element_by_id('modal_render_calculated_values_editor_confirm').click()
        time.sleep(0.3)
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'btn_show_advanced_settings')
        test_utils.select_by_value_in_element_by_id(self.driver, 'custom_options_rollview_popout_editor', 'inline')        
        test_utils.select_by_value_in_element_by_id(self.driver, 'permissions_edit_mode_student', 'self')
        test_utils.select_by_value_in_element_by_id(self.driver, 'custom_options_student_direct_access', 'single,roll')        
        
        test_utils.move_to_click_element_by_id(self.driver, 'submitButton')
        assert "Column configuration successfully updated" in self.driver.page_source
        new_multientry_column_uuid_2 = re.findall('COL_[A-F0-9a-f_]+', self.driver.current_url)[0]
        assert new_multientry_column_uuid_2
        print('Created new multientry column 2 ' + new_multientry_column_uuid_2)
        
        # test multientry column 2 roll mode - inline
        _sid = '999888790'
        print('Testing multientry 2 column data entry roll: ' + new_multientry_column_name_2)
        self.driver.get(f'{config.URL_BASE}/entry/table/{new_list_uuid}/columns/{new_multientry_column_uuid_2}/roll')
        # interact with slider
        time.sleep(1)
        _elem = self.driver.find_element_by_css_selector(f"div.sres-input-container[data-sres-identifier='{_sid}'][data-sres-columnuuid='{new_multientry_column_uuid_2}'] .irs-handle.single")
        ActionChains(self.driver).move_to_element(_elem).click(_elem).pause(0.5).send_keys(Keys.RIGHT).pause(0.5).send_keys(Keys.RIGHT).pause(0.5).send_keys(Keys.RIGHT).pause(0.5).perform()
        time.sleep(2)
        test_utils.save_screenshot(self.driver)
        print(self.driver.find_element_by_id(f'{new_multientry_column_uuid_2}_2_{_sid}').get_property('value'))
        assert self.driver.find_element_by_id(f'{new_multientry_column_uuid_2}_2_{_sid}').get_property('value') == '8.0'
        # interact with single dropdown
        _elem = self.driver.find_element_by_css_selector(f"button[data-id='{new_multientry_column_uuid_2}_1_{_sid}'")
        ActionChains(self.driver).move_to_element(_elem).click(_elem).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.ENTER).perform()
        time.sleep(0.7)
        assert self.driver.find_element_by_id(f'{new_multientry_column_uuid_2}_2_{_sid}').get_property('value') == '5.0'
        # save
        self.driver.find_element_by_css_selector(f"button.sres-addvalue-btn-save.sres-addvalue-save[data-sres-identifier='{_sid}']").click()
        WebDriverWait(self.driver, 5).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(self.driver, 5).until(lambda x: f"Successfully saved to server for {_sid}" in x.page_source)
        # check data
        _saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid_2, _sid)
        _saved_data = json.loads(_saved_data)
        assert _saved_data[0] == '8'
        assert _saved_data[1] == '2'
        assert _saved_data[2] == '5.0'
        # refresh and check again
        self.driver.refresh()
        assert self.driver.find_element_by_id(f'{new_multientry_column_uuid_2}_2_{_sid}').get_property('value') == '5.0'
        
        ##################
        # test as a portal
        ##################
        
        print("Testing columns in a student-editable portal...")
        
        # build portal # TODO eventually refactor this into a portal test when built
        self.driver.get(f'{config.URL_BASE}/portals/new')
        assert "Create new portal" in self.driver.page_source
        test_utils.move_to_send_keys_element_by_id(self.driver, 'portal_name', f"Portal for testing {_id}")
        #self.driver.find_element_by_id('available_from').send_keys(datetime.datetime.now().strftime('%d/%m/%Y'))
        self.driver.find_element_by_id('available_from').send_keys('01012020')
        #self.driver.find_element_by_id('available_to').send_keys(datetime.datetime.now().strftime('%d/%m/%Y'))
        self.driver.find_element_by_id('available_to').send_keys('01012030')
        test_utils.move_to_click_element_by_id(self.driver, 'add_panel')
        test_utils.move_to_click_element_by_id(self.driver, 'add_panel')
        self.driver.execute_script(f"""
            $('#panel_content-panel-x1').text('${new_multientry_column_uuid_1}$');
            $('#panel_content-panel-x2').text('${new_multientry_column_uuid_2}$');
            $('#panel_mode-panel-x1').val('write');
            $('#panel_mode-panel-x2').val('write');
        """)
        test_utils.move_to_click_element_by_id(self.driver, 'btn_save')
        assert "Portal configuration successfully updated" in self.driver.page_source
        portal_uuid = re.findall('(?<=portals/)[A-F0-9a-f_]+', self.driver.current_url)[0]
        print(f"Created portal {portal_uuid}")
        
        #self.list_student = {
        #    'username': 'testuser_15795197219075863',
        #    'password': 'a4wUuDa2GphxKVoYOa1hNYk0fdlU3k13m3nIPJ5gHeahQek0',
        #    'sid': 'SID15795197219075863'
        #}
        #new_multientry_column_uuid_1 = 'COL_93F977B9_D573_4C61_B9E7E87C0F8A3B5D'
        #new_multientry_column_uuid_2 = 'COL_8E21B0D4_AF0A_4B11_AB893BBD3385B7CA'
        #portal_uuid = '60C5866E_EB14_4363_8538789434DCA784'
        #new_list_uuid = '265377A5_9925_417A_811D701ADF8F5075'
        
        # test portal as student
        driver2 = webdriver.Chrome(config.CHROMEDRIVER_PATH, chrome_options=options)
        driver2.get(f'{config.URL_BASE}/portals/{portal_uuid}/view')
        print(f'logging in as student {self.list_student}')
        driver2.find_element_by_id('loginUsername').send_keys(self.list_student['username'])
        driver2.find_element_by_id('loginPassword').send_keys(self.list_student['password'])
        driver2.find_element_by_id('login_button').click()
        time.sleep(1)
        # twiddle multientry 1
        ## interact with slider
        _sid = self.list_student['username']
        time.sleep(1)
        _elem = driver2.find_elements_by_css_selector(f"div.sres-input-container[data-sres-identifier='{_sid}'][data-sres-columnuuid='{new_multientry_column_uuid_1}'] .irs-handle.single")[0]
        ActionChains(driver2).move_to_element(_elem).click(_elem).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).perform()
        time.sleep(1)
        assert driver2.find_element_by_id(f'{new_multientry_column_uuid_1}_2_{_sid}').get_property('value') == '8.0' 
        ## interact with single dropdown
        _elem = driver2.find_element_by_css_selector(f"button[data-id='{new_multientry_column_uuid_1}_1_{_sid}']")
        ActionChains(driver2).move_to_element(_elem).click(_elem).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.ENTER).perform()
        time.sleep(0.3)
        assert driver2.find_element_by_id(f'{new_multientry_column_uuid_1}_2_{_sid}').get_property('value') == '10.0'
        ## interact with multi buttons
        _elem = driver2.find_element_by_css_selector(f"button.sres-addvalue-multientry-button[data-sres-value='4'][data-sres-columnuuid='{new_multientry_column_uuid_1}']")
        test_utils.move_to_click_element(driver2, _elem)
        time.sleep(0.2)
        assert driver2.find_element_by_id(f'{new_multientry_column_uuid_1}_4_{_sid}').get_property('value') == '7'
        _elem = driver2.find_element_by_css_selector(f"button.sres-addvalue-multientry-button[data-sres-value='12'][data-sres-columnuuid='{new_multientry_column_uuid_1}']")
        test_utils.move_to_click_element(driver2, _elem)
        time.sleep(0.2)
        assert driver2.find_element_by_id(f'{new_multientry_column_uuid_1}_4_{_sid}').get_property('value') == '9' #8.667 rounded
        # twiddle multientry 2
        ## interact with slider
        _elem = driver2.find_element_by_css_selector(f"div.sres-input-container[data-sres-identifier='{_sid}'][data-sres-columnuuid='{new_multientry_column_uuid_2}'] .irs-handle.single")
        ActionChains(driver2).move_to_element(_elem).click(_elem).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).perform()
        time.sleep(0.5)
        assert driver2.find_element_by_id(f'{new_multientry_column_uuid_2}_2_{_sid}').get_property('value') == '7.0' 
        ## interact with single dropdown
        _elem = driver2.find_element_by_css_selector(f"button[data-id='{new_multientry_column_uuid_2}_1_{_sid}']")
        ActionChains(driver2).move_to_element(_elem).click(_elem).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.ENTER).perform()
        time.sleep(0.3)
        assert driver2.find_element_by_id(f'{new_multientry_column_uuid_2}_2_{_sid}').get_property('value') == '4.0'
        # save everything
        test_utils.move_to_click_element_by_css_selector(driver2, f"button.sres-addvalue-btn-save.sres-addvalue-save[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}']")
        WebDriverWait(driver2, 5).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(driver2, 5).until(lambda x: f"Saved" in x.page_source)
        time.sleep(5)
        test_utils.move_to_click_element_by_css_selector(driver2, f"button.sres-addvalue-btn-save.sres-addvalue-save[data-sres-columnuuid='{new_multientry_column_uuid_2}'][data-sres-identifier='{_sid}']")
        WebDriverWait(driver2, 5).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(driver2, 5).until(lambda x: f"Saved" in x.page_source)
        time.sleep(5)
        # check saved data
        _saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid_1, self.list_student['sid'])
        _saved_data = json.loads(_saved_data)
        print(_saved_data)
        assert _saved_data[0] == '8'
        assert _saved_data[1] == '2'
        assert _saved_data[2] == '10.0'
        assert _saved_data[3] == ['4', '12']
        assert _saved_data[4] == '8.667'
        _saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid_2, self.list_student['sid'])
        print(_saved_data)
        _saved_data = json.loads(_saved_data)
        assert _saved_data[0] == '7'
        assert _saved_data[1] == '1'
        assert _saved_data[2] == '4.0'
        # refresh and check again
        driver2.refresh()
        assert driver2.find_element_by_id(f'{new_multientry_column_uuid_1}_2_{_sid}').get_property('value') == '10.0'
        assert driver2.find_element_by_id(f'{new_multientry_column_uuid_1}_4_{_sid}').get_property('value') == '9' #8.667 rounded
        assert driver2.find_element_by_id(f'{new_multientry_column_uuid_2}_2_{_sid}').get_property('value') == '4.0'
        driver2.quit()
        
        # delete portal
        # TODO
        
        # Delete list
        #test_list_crud.TestListCRUD._delete_list(self, _id)

if __name__ == '__main__':
    unittest.main()

