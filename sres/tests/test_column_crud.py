import unittest
import time
import datetime
import os
import re
import json

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.select import Select
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.remote.command import Command

from sres.tests import config
from sres.tests import utils as test_utils

class TestBase(unittest.TestCase):
    
    def setUp(self):
        options = Options()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('window-size=1600,900')
        self.driver = webdriver.Chrome(config.CHROMEDRIVER_PATH, chrome_options=options)
        
        # Create test users
        self.super_admin = test_utils.create_test_user(['super'])
        assert self.super_admin['username'] and self.super_admin['password']
        self.list_admin = test_utils.create_test_user(['list'])
        assert self.list_admin['username'] and self.list_admin['password']
        
        self.driver.get(config.URL_BASE)
        self.driver.find_element_by_id('loginUsername').send_keys(self.list_admin['username'])
        self.driver.find_element_by_id('loginPassword').send_keys(self.list_admin['password'])
        self.driver.find_element_by_id('login_button').click()
        assert "SRES" in self.driver.title
        assert self.list_admin['username'] in self.driver.find_element_by_id('logged_in_username').text
        time.sleep(2)
        
    def tearDown(self):
        self.driver.quit()
    
class TestColumnCRUD(TestBase):
    
    def _sendkeys_for_column_edit(self, column_name, column_type, column_description=None):
        
        self.driver.find_element_by_id('columnname').send_keys(column_name)
        self.driver.find_element_by_id('columndescription').send_keys(
            column_description if column_description else "Generated by testing suite"
        )
        for date_button in self.driver.find_elements_by_class_name('sres-date-shortcut-today'):
            if date_button.is_displayed():
                date_button.click()
        self.driver.find_element_by_id('dataType-' + column_type).click()
    
    def _sendkeys_for_multientry_selectable_options(self, n, options):
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_editor_select_' + str(n))
        time.sleep(0.5)
        
        assert self.driver.find_element_by_id('modal_select_from_list_editor').is_displayed()
        
        for option in options:
            self.driver.find_element_by_id('select_from_list_add_option').click()
            
        display_inputs = self.driver.find_elements_by_css_selector('.sres-select-from-list-row:not(.d-none) .sres-select-from-list-row-display')
        for i, el in enumerate(display_inputs):
            if 'display' in options[i]:
                test_utils.move_to_element(self.driver, el)
                el.send_keys(options[i]['display'])
        
        value_inputs = self.driver.find_elements_by_css_selector('.sres-select-from-list-row:not(.d-none) .sres-select-from-list-row-value')
        for i, el in enumerate(value_inputs):
            if 'value' in options[i]:
                test_utils.move_to_element(self.driver, el)
                el.send_keys(options[i]['value'])
            
        more_toggle_inputs = self.driver.find_elements_by_css_selector('.sres-select-from-list-row:not(.d-none) .sres-select-from-list-row-more-options-toggle')
        for i, el in enumerate(more_toggle_inputs):
            test_utils.move_to_element(self.driver, el)
            el.click()
        description_inputs = self.driver.find_elements_by_css_selector('.sres-select-from-list-row:not(.d-none) .sres-select-from-list-row-description')
        for i, el in enumerate(description_inputs):
            if options[i]['description']:
                el.send_keys(options[i]['description'])
        
        test_utils.move_to_click_element_by_id(self.driver, 'modal_select_from_list_editor_confirm')
        time.sleep(0.2)
        
        assert not self.driver.find_element_by_id('modal_select_from_list_editor').is_displayed()
    
    def test_column_crud(self):
        
        from sres.tests import test_list_crud
        _id, new_list_uuid = test_list_crud.TestListCRUD._create_list(self)
        assert new_list_uuid
        print('Created new list ' + new_list_uuid)
        
        ###########################
        # Create timestamp (submission) column
        ###########################
        new_timestamp_column_name = "Timestamp test 1"
        print('Creating timestamp column: ' + new_timestamp_column_name)
        self.driver.get(config.URL_BASE + '/tables/' + new_list_uuid + '/columns/new/standard')
        self._sendkeys_for_column_edit(column_name=new_timestamp_column_name, column_type="submission")
        test_utils.move_to_click_element_by_id(self.driver, 'submitButton')
        assert "Column configuration successfully updated" in self.driver.page_source
        new_timestamp_column_uuid = re.findall('COL_[A-F0-9a-f_]+', self.driver.current_url)[0]
        assert new_timestamp_column_uuid
        print('Created new timestamp column ' + new_timestamp_column_uuid)
        
        ###########################
        # Create simple entry (mark) column
        ###########################
        new_simple_column_name = "Simple entry test 1"
        print('Creating simple column: ' + new_simple_column_name)
        self.driver.get(config.URL_BASE + '/tables/' + new_list_uuid + '/columns/new/standard')
        self._sendkeys_for_column_edit(column_name=new_simple_column_name, column_type="mark")
        test_utils.select_by_value_in_element_by_css_selector(self.driver, '#allowFreeInput > div > select', 'true')
        test_utils.move_to_click_element_by_id(self.driver, 'submitButton')
        assert "Column configuration successfully updated" in self.driver.page_source
        new_simple_column_uuid = re.findall('COL_[A-F0-9a-f_]+', self.driver.current_url)[0]
        assert new_simple_column_uuid
        print('Created new simple column ' + new_simple_column_uuid)
        
        ###########################
        # Create multi-entry column
        ###########################
        new_multientry_column_name = "Multientry test 1"
        print('Creating multientry column: ' + new_multientry_column_name)
        self.driver.get(config.URL_BASE + '/tables/' + new_list_uuid + '/columns/new/standard')
        self._sendkeys_for_column_edit(column_name=new_multientry_column_name, column_type="multiEntry")
        
        n = 1
        
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Simple text 1')
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Multiline text 1')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'regex-long')
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Buttons 1')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'select')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': 'Poor',
                    'value': '1',
                    'description': ''
                },
                {
                    'display': 'OK',
                    'value': '3',
                    'description': ''
                },
                {
                    'display': 'Great',
                    'value': '5',
                    'description': ''
                }
            ]
        )
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Buttons 2 multi')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'select')
        time.sleep(0.5)
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_select_mode_' + str(n), 'multiple')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': 'Verbal',
                    'value': 'verbal',
                    'description': ''
                },
                {
                    'display': 'Written',
                    'value': 'written',
                    'description': ''
                },
                {
                    'display': 'Telekinetic',
                    'value': 'tele',
                    'description': ''
                }
            ]
        )
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Dropdown 1')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'dropdown')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': 'Fail',
                    'value': 'FA',
                    'description': ''
                },
                {
                    'display': 'Pass',
                    'value': 'PS',
                    'description': ''
                },
                {
                    'display': 'Distinction',
                    'value': 'DI',
                    'description': ''
                }
            ]
        )
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Dropdown 2 multi')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'dropdown')
        time.sleep(0.5)
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_select_mode_' + str(n), 'multiple')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': 'Flipping',
                    'value': 'flip',
                    'description': 'Flipping worked well.'
                },
                {
                    'display': 'Flapping',
                    'value': 'flap',
                    'description': 'Flapping performed exceptionally.'
                },
                {
                    'display': 'Flopping',
                    'value': 'flop',
                    'description': 'Flopping was well done.'
                }
            ]
        )
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Slider 1')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'slider')
        time.sleep(0.5)
        test_utils.select_by_value_in_element_by_id(self.driver, 'multi_entry_slider_mode_' + str(n), 'textual')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': 'Fail',
                    'value': 'FA',
                    'description': ''
                },
                {
                    'display': 'Pass',
                    'value': 'PS',
                    'description': ''
                },
                {
                    'display': 'Distinction',
                    'value': 'DI',
                    'description': ''
                }
            ]
        )
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Slider 2')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'slider')
        time.sleep(0.5)
        test_utils.select_by_value_in_element_by_id(self.driver, 'multi_entry_slider_mode_' + str(n), 'numeric-free')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': '0',
                    'value': '0',
                    'description': ''
                },
                {
                    'display': 'Developing',
                    'value': '5',
                    'description': ''
                },
                {
                    'display': 'Developed',
                    'value': '10',
                    'description': ''
                },
                {
                    'display': 'Awesome',
                    'value': '20',
                    'description': ''
                }
            ]
        )
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'btn_show_advanced_settings')
        test_utils.select_by_value_in_element_by_id(self.driver, 'custom_options_rollview_popout_editor', 'popout')        
        
        test_utils.move_to_click_element_by_id(self.driver, 'submitButton')
        assert "Column configuration successfully updated" in self.driver.page_source
        new_multientry_column_uuid = re.findall('COL_[A-F0-9a-f_]+', self.driver.current_url)[0]
        assert new_multientry_column_uuid
        print('Created new multientry column ' + new_multientry_column_uuid)
        
        # View list and check columns are there
        self.driver.get(config.URL_BASE + '/tables/' + new_list_uuid)
        time.sleep(5) # wait for page to load
        column_titles = [ c.text for c in self.driver.find_elements_by_css_selector('.sres-column-title > .sres-column-title-text') ]
        assert new_timestamp_column_name in column_titles
        assert new_simple_column_name in column_titles
        assert new_multientry_column_name in column_titles
          
        ####################
        # Test each column
        ####################
        
        # test timestamp column single mode
        print('Testing timestamp column data entry single: ' + new_timestamp_column_name)
        self.driver.get(f'{config.URL_BASE}/entry/table/{new_list_uuid}/columns/{new_timestamp_column_uuid}/single')
        assert new_timestamp_column_name in self.driver.page_source
        self.driver.find_element_by_id('search_student_term').send_keys('999888790')
        WebDriverWait(self.driver, 10).until(lambda x: x.find_element_by_class_name('aa-with-search-results').is_displayed())
        self.driver.find_element_by_id('search_student_term').send_keys(Keys.ENTER)
        assert "Warren Adamski" in self.driver.page_source
        time.sleep(1)
        assert self.driver.find_element_by_class_name('sres-addvalue-timestamp-checkbox').is_selected()
        time.sleep(2)
        assert test_utils.read_db_data_value(new_list_uuid, new_timestamp_column_uuid, '999888790')
        
        # test timestamp column roll mode
        print('Testing timestamp column data entry roll: ' + new_timestamp_column_name)
        self.driver.get(f'{config.URL_BASE}/entry/table/{new_list_uuid}/columns/{new_timestamp_column_uuid}/roll')
        self.driver.execute_script("$('.sres-input-container[data-sres-identifier=999888804] div.toggle-group .toggle-off').click();")
        time.sleep(1)
        WebDriverWait(self.driver, 10).until(lambda x: "Successfully saved to server for 999888804" in x.page_source)
        assert test_utils.read_db_data_value(new_list_uuid, new_timestamp_column_uuid, '999888804')
        
        # set a test string
        _test_string = """,./;'[]\-<foo val=`bar' />=<>?:"{}|_"'"'"''''"+!@#$%^&*()`~Ω≈ç√∫˜µ≤≥÷<foo val=“bar” />"""
        
        # test simple entry column single mode
        print('Testing simple column data entry single: ' + new_simple_column_name)
        self.driver.get(f'{config.URL_BASE}/entry/table/{new_list_uuid}/columns/{new_simple_column_uuid}/single')
        assert new_simple_column_name in self.driver.page_source
        self.driver.find_element_by_id('search_student_term').send_keys('999888790')
        WebDriverWait(self.driver, 10).until(lambda x: x.find_element_by_class_name('aa-with-search-results').is_displayed())
        self.driver.find_element_by_id('search_student_term').send_keys(Keys.ENTER)
        assert "Warren Adamski" in self.driver.page_source
        time.sleep(1)
        self.driver.find_element_by_class_name('sres-addvalue-sase-text').send_keys(_test_string)
        self.driver.find_element_by_class_name('sres-addvalue-sase-text').send_keys(Keys.ENTER)
        WebDriverWait(self.driver, 10).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(self.driver, 5).until(lambda x: "Successfully saved to server for 999888790" in x.page_source)
        assert _test_string == test_utils.read_db_data_value(new_list_uuid, new_simple_column_uuid, '999888790')
        
        # test simple entry column roll mode
        print('Testing simple column data entry roll: ' + new_simple_column_name)
        self.driver.get(f'{config.URL_BASE}/entry/table/{new_list_uuid}/columns/{new_simple_column_uuid}/roll')
        self.driver.execute_script("$('input.sres-addvalue-sase-text.sres-addvalue-module-element[data-sres-identifier=999888774]').focus();")
        _elem = self.driver.switch_to.active_element
        _elem.send_keys(_test_string)
        self.driver.execute_script("$('button.sres-addvalue-btn-save.sres-addvalue-sase-text-save[data-sres-identifier=999888774]').click();")
        WebDriverWait(self.driver, 10).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(self.driver, 5).until(lambda x: "Successfully saved to server for 999888774" in x.page_source)
        assert _test_string == test_utils.read_db_data_value(new_list_uuid, new_simple_column_uuid, '999888774')
        
        # test multientry column single mode
        print('Testing multientry column data entry single: ' + new_multientry_column_name)
        self.driver.get(f'{config.URL_BASE}/entry/table/{new_list_uuid}/columns/{new_multientry_column_uuid}/single')
        assert new_multientry_column_name in self.driver.page_source
        self.driver.find_element_by_id('search_student_term').send_keys('999888789')
        WebDriverWait(self.driver, 10).until(lambda x: x.find_element_by_class_name('aa-with-search-results').is_displayed())
        self.driver.find_element_by_id('search_student_term').send_keys(Keys.ENTER)
        assert "Hai Basham" in self.driver.page_source
        time.sleep(1)
        # interact with first subfield, singleline text
        _elem = self.driver.switch_to.active_element
        ActionChains(self.driver).move_to_element(_elem).send_keys(_test_string).send_keys(Keys.TAB).perform()
        # interact with mutliline text
        self.driver.find_element_by_id(f'{new_multientry_column_uuid}_1_999888789').send_keys(_test_string)
        # interact with single button
        self.driver.find_element_by_css_selector(f"button.sres-addvalue-multientry-button[data-sres-columnuuid='{new_multientry_column_uuid}'][data-sres-value='3']").click()
        # interact with multi button
        _elem = self.driver.find_element_by_css_selector(f"button.sres-addvalue-multientry-button[data-sres-value='written'][data-sres-columnuuid='{new_multientry_column_uuid}']")
        test_utils.move_to_click_element(self.driver, _elem)
        _elem = self.driver.find_element_by_css_selector(f"button.sres-addvalue-multientry-button[data-sres-value='tele'][data-sres-columnuuid='{new_multientry_column_uuid}']")
        test_utils.move_to_click_element(self.driver, _elem)
        # interact with single dropdown
        _elem = self.driver.find_element_by_css_selector(f"button[data-id={new_multientry_column_uuid}_4_999888789")
        ActionChains(self.driver).move_to_element(_elem).click(_elem).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.ENTER).perform()
        # use the more fields to interact with multi dropdown
        _elem = self.driver.find_element_by_css_selector(f"button[data-target='#{new_multientry_column_uuid}_5_999888789_more']")
        test_utils.move_to_click_element(self.driver, _elem)
        _elem = self.driver.find_element_by_css_selector("button[data-sres-multientry-item-value='flip']")
        test_utils.move_to_click_element(self.driver, _elem)
        _elem = self.driver.find_element_by_css_selector("button[data-sres-multientry-item-value='flop']")
        test_utils.move_to_click_element(self.driver, _elem)
        # interact with slider 1 and 2
        ActionChains(self.driver).send_keys(Keys.TAB).pause(0.2).send_keys(Keys.RIGHT).pause(0.2).send_keys(Keys.RIGHT).pause(1.0).send_keys(Keys.TAB).pause(0.2).send_keys(Keys.RIGHT).pause(0.2).send_keys(Keys.RIGHT).pause(1.0).perform()
        # save
        self.driver.execute_script("$('button.sres-addvalue-btn-save.sres-addvalue-save').click();")
        WebDriverWait(self.driver, 10).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(self.driver, 5).until(lambda x: "Successfully saved to server for 999888789" in x.page_source)
        assert "Successfully saved to server for 999888789" in self.driver.page_source
        # check the saved data
        _saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid, '999888789')
        _saved_data = json.loads(_saved_data)
        assert _saved_data[0] == _test_string
        assert _saved_data[1] == _test_string
        assert _saved_data[2] == '3'
        assert _saved_data[3] == ['written', 'tele']
        assert _saved_data[4] == 'PS'
        assert _saved_data[5] == ['flip', 'flop']
        assert _saved_data[6] == 'DI'
        assert _saved_data[7] == '2'
        
        # test multientry column roll mode
        print('Testing multientry column data entry roll: ' + new_multientry_column_name)
        self.driver.get(f'{config.URL_BASE}/entry/table/{new_list_uuid}/columns/{new_multientry_column_uuid}/roll')
        self.driver.find_element_by_css_selector("tr[data-sres-identifier='999888795'] button.sres-trigger-editor-popout").click()
        time.sleep(0.5)
        assert '999888795' == self.driver.find_element_by_css_selector("#apply_data_to_all_modal .modal-title").text
        # interact with singleline textbox
        test_utils.move_to_send_keys_element_by_id(self.driver, f'{new_multientry_column_uuid}_0_', _test_string)
        # interact with single button
        self.driver.find_element_by_css_selector("button.sres-addvalue-multientry-button.sres-apply-data-to-all-modal[data-sres-value='1']").click()
        # save
        self.driver.find_element_by_css_selector("button.sres-addvalue-btn-save.sres-addvalue-save.sres-apply-data-to-all-modal").click()
        WebDriverWait(self.driver, 5).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(self.driver, 5).until(lambda x: "Successfully saved to server for 999888795" in x.page_source)
        assert "Successfully saved to server for 999888795" in self.driver.page_source
        # check data
        _saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid, '999888795')
        _saved_data = json.loads(_saved_data)
        assert _saved_data[0] == _test_string
        assert _saved_data[2] == '1'
        
        # Delete list
        test_list_crud.TestListCRUD._delete_list(self, _id, new_list_uuid)

if __name__ == '__main__':
    unittest.main()

