import unittest
import time
import datetime
import os
import re
import json

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.select import Select
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.alert import Alert
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.remote.command import Command

from sres.tests import config
from sres.tests import utils as test_utils

options = Options()
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('window-size=1600,900')

class TestBase(unittest.TestCase):
    
    def setUp(self):
        self.driver = webdriver.Chrome(config.CHROMEDRIVER_PATH, chrome_options=options)
        
        # Create test users
        self.list_admin = test_utils.create_test_user(['list', 'filter'])
        assert self.list_admin['username'] and self.list_admin['password']
        self.list_user = test_utils.create_test_user([])
        assert self.list_user['username'] and self.list_user['password']
        self.list_student = test_utils.create_test_user(['student'])
        assert self.list_student['username'] and self.list_student['password']
        
        self.driver.get(config.URL_BASE)
        self.driver.find_element_by_id('loginUsername').send_keys(self.list_admin['username'])
        self.driver.find_element_by_id('loginPassword').send_keys(self.list_admin['password'])
        self.driver.find_element_by_id('login_button').click()
        assert "SRES" in self.driver.title
        assert self.list_admin['username'] in self.driver.find_element_by_id('logged_in_username').text
        time.sleep(2)
        
    def tearDown(self):
        self.driver.quit()
    
class TestColumnMultipleReportsMode(TestBase):
    
    def _sendkeys_for_column_edit(self, column_name, column_type, column_description=None):
        
        self.driver.find_element_by_id('columnname').send_keys(column_name)
        self.driver.find_element_by_id('columndescription').send_keys(
            column_description if column_description else "Generated by testing suite"
        )
        for date_button in self.driver.find_elements_by_class_name('sres-date-shortcut-today'):
            if date_button.is_displayed():
                date_button.click()
        self.driver.find_element_by_id('dataType-' + column_type).click()
    
    def _sendkeys_for_multientry_selectable_options(self, n, options):
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_editor_select_' + str(n))
        time.sleep(0.5)
        
        assert self.driver.find_element_by_id('modal_select_from_list_editor').is_displayed()
        
        for option in options:
            self.driver.find_element_by_id('select_from_list_add_option').click()
            
        display_inputs = self.driver.find_elements_by_css_selector('.sres-select-from-list-row:not(.d-none) .sres-select-from-list-row-display')
        for i, el in enumerate(display_inputs):
            if 'display' in options[i]:
                test_utils.move_to_element(self.driver, el)
                el.send_keys(options[i]['display'])
        
        value_inputs = self.driver.find_elements_by_css_selector('.sres-select-from-list-row:not(.d-none) .sres-select-from-list-row-value')
        for i, el in enumerate(value_inputs):
            if 'value' in options[i]:
                test_utils.move_to_element(self.driver, el)
                el.send_keys(options[i]['value'])
            
        more_toggle_inputs = self.driver.find_elements_by_css_selector('.sres-select-from-list-row:not(.d-none) .sres-select-from-list-row-more-options-toggle')
        for i, el in enumerate(more_toggle_inputs):
            test_utils.move_to_element(self.driver, el)
            el.click()
        description_inputs = self.driver.find_elements_by_css_selector('.sres-select-from-list-row:not(.d-none) .sres-select-from-list-row-description')
        for i, el in enumerate(description_inputs):
            if options[i]['description']:
                el.send_keys(options[i]['description'])
        
        test_utils.move_to_click_element_by_id(self.driver, 'modal_select_from_list_editor_confirm')
        time.sleep(0.2)
        
        assert not self.driver.find_element_by_id('modal_select_from_list_editor').is_displayed()
    
    def test_column_multiple_reports_mode(self):
        
        from sres.tests import test_list_crud
        _id, new_list_uuid = test_list_crud.TestListCRUD._create_list(self)
        assert new_list_uuid
        print('Created new list ' + new_list_uuid)
        
        test_utils.add_student_to_list(self.driver, new_list_uuid, self.list_student['user'])
        test_utils.add_user_to_list(self.driver, new_list_uuid, self.list_user['user'])
        
        #############################
        # Create multi-entry column 1
        #############################
        new_multientry_column_name_1 = "Multientry multiple reports test 1"
        print('Creating multientry column: ' + new_multientry_column_name_1)
        self.driver.get(f'{config.URL_BASE}/tables/{new_list_uuid}/columns/new/standard')
        self._sendkeys_for_column_edit(column_name=new_multientry_column_name_1, column_type="multiEntry")
        
        n = 1
        
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Self competency rating')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'slider')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': 'Five',
                    'value': '5',
                    'description': ''
                },
                {
                    'display': 'Ten',
                    'value': '10',
                    'description': ''
                },
                {
                    'display': 'Fifteen',
                    'value': '15',
                    'description': ''
                }
            ]
        )
        test_utils.select_by_value_in_element_by_id(self.driver, 'multi_entry_slider_mode_' + str(n), 'numeric-free')
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Staff rating')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'dropdown')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': 'One',
                    'value': '1',
                    'description': ''
                },
                {
                    'display': 'Two',
                    'value': '2',
                    'description': ''
                },
                {
                    'display': 'Three',
                    'value': '3',
                    'description': ''
                }
            ]
        )
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_editing_allowed_by_' + str(n), 'staff')
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Some student comments')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'regex')
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'multi_entry_add_row')
        test_utils.move_to_send_keys_element_by_id(self.driver, 'multi_entry_label_' + str(n), 'Competencies achieved (staff only)')
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_type_' + str(n), 'select')
        time.sleep(0.3)
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_select_mode_' + str(n), 'multiple')
        self._sendkeys_for_multientry_selectable_options(
            n,
            [
                {
                    'display': 'Speaking',
                    'value': 's',
                    'description': ''
                },
                {
                    'display': 'Writing',
                    'value': 'w',
                    'description': ''
                },
                {
                    'display': 'Arguing',
                    'value': 'a',
                    'description': ''
                },
                {
                    'display': 'Presenting',
                    'value': 'p',
                    'description': ''
                }
            ]
        )
        test_utils.select_by_value_in_element_by_name(self.driver, 'multi_entry_editing_allowed_by_' + str(n), 'staff')
        n += 1
        
        test_utils.move_to_click_element_by_id(self.driver, 'btn_show_advanced_settings')
        test_utils.select_by_value_in_element_by_id(self.driver, 'custom_options_rollview_popout_editor', 'popout')        
        test_utils.select_by_value_in_element_by_id(self.driver, 'permissions_edit_mode_student', 'self')        
        test_utils.select_by_value_in_element_by_id(self.driver, 'custom_options_student_direct_access', 'single,roll')        
        test_utils.select_by_value_in_element_by_id(self.driver, 'custom_options_multiple_reports_mode', 'enabled')        
        
        test_utils.move_to_click_element_by_id(self.driver, 'submitButton')
        assert "Column configuration successfully updated" in self.driver.page_source
        new_multientry_column_uuid_1 = re.findall('COL_[A-F0-9a-f_]+', self.driver.current_url)[0]
        assert new_multientry_column_uuid_1
        print('Created new multientry column 1 ' + new_multientry_column_uuid_1)
        
        ######################################
        # Test column 1 in data entry modes
        ######################################
        
        # test column 1 single mode
        sid1 = '999888789'
        text1 = test_utils.generate_random_string()
        print(f"Testing multientry column 1 data entry single: {new_multientry_column_name_1}")
        self.driver.get(f'{config.URL_BASE}/entry/table/{new_list_uuid}/columns/{new_multientry_column_uuid_1}/single?identifier={sid1}')
        assert "Hai Basham" in self.driver.page_source
        time.sleep(1)
        # check report counter is zero
        _elem = self.driver.find_element_by_css_selector(f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{sid1}'] input.sres-report-toggler-current-display")
        assert "0" == _elem.get_property('value')
        _elem = self.driver.find_element_by_css_selector(f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{sid1}'] span.sres-report-toggler-max-display")
        assert "0" == _elem.get_attribute('innerHTML')
        # interact with slider 1
        self.driver.find_elements_by_class_name('irs-handle')[0].click()
        ActionChains(self.driver).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).perform()
        # interact with single dropdown 2
        _elem = self.driver.find_element_by_css_selector(f"button[data-id='{new_multientry_column_uuid_1}_1_{sid1}']")
        ActionChains(self.driver).move_to_element(_elem).click(_elem).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.ENTER).perform()
        time.sleep(0.2)
        # interact with regex
        test_utils.move_to_send_keys_element_by_id(
            driver=self.driver,
            id=f'{new_multientry_column_uuid_1}_2_{sid1}',
            keys=text1
        )
        # interact with multi button
        _elem = self.driver.find_element_by_css_selector(f"button.sres-addvalue-multientry-button[data-sres-value='w'][data-sres-columnuuid='{new_multientry_column_uuid_1}']")
        test_utils.move_to_click_element(self.driver, _elem)
        _elem = self.driver.find_element_by_css_selector(f"button.sres-addvalue-multientry-button[data-sres-value='p'][data-sres-columnuuid='{new_multientry_column_uuid_1}']")
        test_utils.move_to_click_element(self.driver, _elem)
        time.sleep(0.2)
        # save
        self.driver.find_element_by_css_selector('button.sres-addvalue-btn-save.sres-addvalue-save').click()
        WebDriverWait(self.driver, 5).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(self.driver, 5).until(lambda x: f"Successfully saved to server for {sid1}" in x.page_source)
        assert f"Successfully saved to server for {sid1}" in self.driver.page_source
        # check report counter has incremented
        _elem = self.driver.find_element_by_css_selector(f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{sid1}'] input.sres-report-toggler-current-display")
        assert "1" == _elem.get_property('value')
        _elem = self.driver.find_element_by_css_selector(f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{sid1}'] span.sres-report-toggler-max-display")
        assert "1" == _elem.get_attribute('innerHTML')
        # check the saved data
        _saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid_1, sid1)
        print('data', str(_saved_data))
        _saved_data = json.loads(_saved_data)
        assert _saved_data[0] == '8'
        assert _saved_data[1] == '2'
        assert _saved_data[2] == text1
        assert _saved_data[3] == ['w', 'p']
        # reload and check
        self.driver.refresh()
        assert '8' == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_0_{sid1}').get_property('value')
        assert text1 == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_2_{sid1}').get_property('value')
        assert test_utils.element_by_css_selector_contains_class(
            driver=self.driver,
            selector=f"button.sres-addvalue-multientry-button[data-sres-value='w'][data-sres-columnuuid='{new_multientry_column_uuid_1}']",
            class_name='btn-primary'
        )
        assert not test_utils.element_by_css_selector_contains_class(
            driver=self.driver,
            selector=f"button.sres-addvalue-multientry-button[data-sres-value='s'][data-sres-columnuuid='{new_multientry_column_uuid_1}']",
            class_name='btn-primary'
        )
        assert test_utils.element_by_css_selector_contains_class(
            driver=self.driver,
            selector=f"button.sres-addvalue-multientry-button[data-sres-value='p'][data-sres-columnuuid='{new_multientry_column_uuid_1}']",
            class_name='btn-primary'
        )
        
        ##########################################
        # test column 1 student direct access mode
        ##########################################
        
        text1 = test_utils.generate_random_string()
        sid1 = self.list_student['sid']
        
        # get the SDA link
        self.driver.get(f'{config.URL_BASE}/tables/{new_list_uuid}/columns/{new_multientry_column_uuid_1}/sda')
        WebDriverWait(self.driver, 10).until(lambda x: 'bit.ly' in x.find_element_by_css_selector("#sda_url a").get_attribute('href'))
        _elem = self.driver.find_element_by_css_selector("#sda_url a")
        sda_url = _elem.get_attribute('href')
        
        # log in as student
        student_driver = webdriver.Chrome(config.CHROMEDRIVER_PATH, chrome_options=options)
        student_driver.get(sda_url)
        student_driver.find_element_by_id('loginUsername').send_keys(self.list_student['username'])
        student_driver.find_element_by_id('loginPassword').send_keys(self.list_student['password'])
        student_driver.find_element_by_id('login_button').click()
        assert "Enter data" in student_driver.find_element_by_css_selector('.navbar-brand').get_attribute('innerHTML')
        assert f"Log out {self.list_student['username']}" in student_driver.page_source
        time.sleep(2)
        
        print(self.list_student)
        
        # interact with form
        test_utils.save_screenshot(student_driver)
        print(f"Student direct access mode - testing multientry column 1 data entry single: {new_multientry_column_name_1}")
        # check report counter is 0
        _elem = student_driver.find_element_by_css_selector(f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{sid1}'] input.sres-report-toggler-current-display")
        assert "0" == _elem.get_property('value')
        _elem = student_driver.find_element_by_css_selector(f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{sid1}'] span.sres-report-toggler-max-display")
        assert "0" == _elem.get_attribute('innerHTML')
        # interact with slider 1
        student_driver.find_elements_by_class_name('irs-handle')[0].click()
        ActionChains(student_driver).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).perform()
        # interact with single dropdown 2 - should be disabled
        _elem = student_driver.find_element_by_css_selector(f"button[data-id='{new_multientry_column_uuid_1}_1_{sid1}']")
        _elem.click()
        assert test_utils.element_by_css_selector_contains_class(
            driver=student_driver,
            selector=f"button[data-id='{new_multientry_column_uuid_1}_1_{sid1}']",
            class_name="disabled"
        )
        # interact with regex
        test_utils.move_to_send_keys_element_by_id(
            driver=student_driver,
            id=f'{new_multientry_column_uuid_1}_2_{sid1}',
            keys=text1
        )
        # interact with multi button - should be disabled i.e. the clicking should have no effect
        _elem = student_driver.find_element_by_css_selector(f"button.sres-addvalue-multientry-button[data-sres-value='s'][data-sres-columnuuid='{new_multientry_column_uuid_1}']")
        test_utils.move_to_click_element(student_driver, _elem)
        assert not test_utils.element_by_css_selector_contains_class(
            driver=student_driver,
            selector=f"button.sres-addvalue-multientry-button[data-sres-value='a'][data-sres-columnuuid='{new_multientry_column_uuid_1}']",
            class_name='btn-primary'
        )
        time.sleep(0.2)
        # try to hack dropdown
        student_driver.execute_script(f"""
            $('#{new_multientry_column_uuid_1}_1_{sid1}').val('Three').trigger('change');
        """)
        test_utils.save_screenshot(student_driver)
        # save
        student_driver.find_element_by_css_selector('button.sres-addvalue-btn-save.sres-addvalue-save').click()
        WebDriverWait(student_driver, 5).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(student_driver, 5).until(lambda x: f"Successfully saved to server for {sid1}" in x.page_source)
        assert f"Successfully saved to server for {sid1}" in student_driver.page_source
        test_utils.save_screenshot(student_driver, 'sda_saved')
        # check report counter has incremented
        _elem = student_driver.find_element_by_css_selector(f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{sid1}'] input.sres-report-toggler-current-display")
        assert "1" == _elem.get_property('value')
        _elem = student_driver.find_element_by_css_selector(f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{sid1}'] span.sres-report-toggler-max-display")
        assert "1" == _elem.get_attribute('innerHTML')
        # check the saved data
        _saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid_1, sid1)
        print('data', str(_saved_data))
        _saved_data = json.loads(_saved_data)
        assert _saved_data[0] == '8'
        assert _saved_data[1] == '' # should have been wiped server-side
        assert _saved_data[2] == text1
        assert _saved_data[3] == ''
        # reload and check
        student_driver.refresh()
        assert '8' == student_driver.find_element_by_id(f'{new_multientry_column_uuid_1}_0_{sid1}').get_property('value')
        assert text1 == student_driver.find_element_by_id(f'{new_multientry_column_uuid_1}_2_{sid1}').get_property('value')
        assert not test_utils.element_by_css_selector_contains_class(
            driver=student_driver,
            selector=f"button.sres-addvalue-multientry-button[data-sres-value='w'][data-sres-columnuuid='{new_multientry_column_uuid_1}']",
            class_name='btn-primary'
        )
        assert not test_utils.element_by_css_selector_contains_class(
            driver=student_driver,
            selector=f"button.sres-addvalue-multientry-button[data-sres-value='s'][data-sres-columnuuid='{new_multientry_column_uuid_1}']",
            class_name='btn-primary'
        )
        _elem = student_driver.find_element_by_css_selector(f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{sid1}'] input.sres-report-toggler-current-display")
        assert "1" == _elem.get_property('value')
        
        ###############################################
        # set data as a teacher and then as a student #
        ###############################################
        
        self.driver.get(f'{config.URL_BASE}/entry/table/{new_list_uuid}/columns/{new_multientry_column_uuid_1}/single?identifier={sid1}')
        assert self.list_student['given_names'] + ' ' + self.list_student['surname'] in self.driver.page_source
        time.sleep(1)
        # check report counter is 1
        _elem = self.driver.find_element_by_css_selector(f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{sid1}'] input.sres-report-toggler-current-display")
        assert "1" == _elem.get_property('value')
        _elem = self.driver.find_element_by_css_selector(f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{sid1}'] span.sres-report-toggler-max-display")
        assert "1" == _elem.get_attribute('innerHTML')
        # interact with single dropdown 2
        _elem = self.driver.find_element_by_css_selector(f"button[data-id='{new_multientry_column_uuid_1}_1_{sid1}']")
        ActionChains(self.driver).move_to_element(_elem).click(_elem).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.ENTER).perform()
        time.sleep(0.2)
        # save
        self.driver.find_element_by_css_selector('button.sres-addvalue-btn-save.sres-addvalue-save').click()
        WebDriverWait(self.driver, 5).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(self.driver, 5).until(lambda x: f"Successfully saved to server for {sid1}" in x.page_source)
        assert f"Successfully saved to server for {sid1}" in self.driver.page_source
        # check the saved data
        _saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid_1, sid1)
        print('data', str(_saved_data))
        _saved_data = json.loads(_saved_data)
        assert _saved_data[0] == '8'
        assert _saved_data[1] == '2'
        assert _saved_data[2] == text1
        assert _saved_data[3] == []
        
        # access as a student
        text2 = test_utils.generate_random_string()
        student_driver.get(sda_url)
        assert "Enter data" in student_driver.find_element_by_css_selector('.navbar-brand').get_attribute('innerHTML')
        time.sleep(2)
        # try to hack dropdown
        student_driver.execute_script(f"""
            $('#{new_multientry_column_uuid_1}_1_{sid1}').val('Three').trigger('change');
        """)
        # interact with regex
        test_utils.move_to_send_keys_element_by_id(
            driver=student_driver,
            id=f'{new_multientry_column_uuid_1}_2_{sid1}',
            keys=text2
        )
        # save
        test_utils.save_screenshot(student_driver, 'sda_before_save')
        student_driver.find_element_by_css_selector('button.sres-addvalue-btn-save.sres-addvalue-save').click()
        WebDriverWait(student_driver, 5).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(student_driver, 5).until(lambda x: f"Successfully saved to server for {sid1}" in x.page_source)
        assert f"Successfully saved to server for {sid1}" in student_driver.page_source
        test_utils.save_screenshot(student_driver, 'sda_saved')
        # check the saved data
        _saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid_1, sid1)
        print('data', str(_saved_data))
        _saved_data = json.loads(_saved_data)
        assert _saved_data[0] == '8'
        assert _saved_data[1] == '2' # should have been reverted to previous staff-set server-side
        assert _saved_data[2] == text1 + text2
        assert _saved_data[3] == []
        
        # test multientry column roll mode - popout
        #print(f"Testing multientry 1 column data entry roll: {new_multientry_column_name_1}")
        #self.driver.get(f'{config.URL_BASE}/entry/table/{new_list_uuid}/columns/{new_multientry_column_uuid_1}/roll')
        #self.driver.find_element_by_css_selector("tr[data-sres-identifier='999888795'] button.sres-trigger-editor-popout").click()
        #time.sleep(0.5)
        #assert '999888795' == self.driver.find_element_by_css_selector("#apply_data_to_all_modal .modal-title").text
        ## interact with slider 1
        #self.driver.find_elements_by_class_name('irs-handle')[0].click()
        #ActionChains(self.driver).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).perform()
        ## interact with single dropdown 2
        #_elem = self.driver.find_element_by_css_selector(f"button[data-id='{new_multientry_column_uuid_1}_1_']")
        #ActionChains(self.driver).move_to_element(_elem).click(_elem).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.ENTER).perform()
        #time.sleep(0.2)
        ## check first minicalc
        #assert '9.0' == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_2_').get_property('value')
        ## interact with multi button
        #_elem = self.driver.find_element_by_css_selector(f"button.sres-addvalue-multientry-button[data-sres-value='1'][data-sres-columnuuid='{new_multientry_column_uuid_1}']")
        #test_utils.move_to_click_element(self.driver, _elem)
        ## check second minicalc
        #assert '5' == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_4_').get_property('value')
        ## save
        #self.driver.find_element_by_css_selector('button.sres-addvalue-btn-save.sres-addvalue-save').click()
        #WebDriverWait(self.driver, 5).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        #WebDriverWait(self.driver, 5).until(lambda x: "Successfully saved to server for 999888795" in x.page_source)
        #assert "Successfully saved to server for 999888795" in self.driver.page_source
        ## check the saved data
        #_saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid_1, '999888795')
        #_saved_data = json.loads(_saved_data)
        #assert _saved_data[0] == '8'
        #assert _saved_data[1] == '1'
        #assert _saved_data[2] == '9.0'
        #assert _saved_data[3] == ['1']
        #assert _saved_data[4] == '5.000'
        ## reload and check
        #self.driver.refresh()
        #self.driver.find_element_by_css_selector("tr[data-sres-identifier='999888795'] button.sres-trigger-editor-popout").click()
        #time.sleep(0.5)
        #assert '999888795' == self.driver.find_element_by_css_selector("#apply_data_to_all_modal .modal-title").text
        #assert '9.0' == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_2_').get_property('value')
        #assert '5' == self.driver.find_element_by_id(f'{new_multientry_column_uuid_1}_4_').get_property('value') #5.000 renders as 5 since step=1 on this slider
        
        
        ##################
        # test as a portal
        ##################
        
        print("Testing column in a student-editable portal...")
        
        # build portal # TODO eventually refactor this into a portal test when built
        self.driver.get(f'{config.URL_BASE}/portals/new')
        assert "Create new portal" in self.driver.page_source
        test_utils.move_to_send_keys_element_by_id(self.driver, 'portal_name', f"Portal for testing {_id}")
        #self.driver.find_element_by_id('available_from').send_keys(datetime.datetime.now().strftime('%d/%m/%Y'))
        self.driver.find_element_by_id('available_from').send_keys('01012020')
        #self.driver.find_element_by_id('available_to').send_keys(datetime.datetime.now().strftime('%d/%m/%Y'))
        self.driver.find_element_by_id('available_to').send_keys('01012030')
        test_utils.move_to_click_element_by_id(self.driver, 'add_panel')
        test_utils.move_to_click_element_by_id(self.driver, 'add_panel')
        self.driver.execute_script(f"""
            $('#panel_content-panel-x1').text('${new_multientry_column_uuid_1}$');
            $('#panel_content-panel-x2').text('blahblah');
            $('#panel_mode-panel-x1').val('write');
            $('#panel_mode-panel-x2').val('write');
        """)
        test_utils.move_to_click_element_by_id(self.driver, 'btn_save')
        assert "Portal configuration successfully updated" in self.driver.page_source
        portal_uuid = re.findall('(?<=portals/)[A-F0-9a-f_]+', self.driver.current_url)[0]
        print(f"Created portal {portal_uuid}")
        
        #self.list_student = {
        #    'username': 'testuser_15795197219075863',
        #    'password': 'a4wUuDa2GphxKVoYOa1hNYk0fdlU3k13m3nIPJ5gHeahQek0',
        #    'sid': 'SID15795197219075863'
        #}
        #new_multientry_column_uuid_1 = 'COL_93F977B9_D573_4C61_B9E7E87C0F8A3B5D'
        #new_multientry_column_uuid_2 = 'COL_8E21B0D4_AF0A_4B11_AB893BBD3385B7CA'
        #portal_uuid = '60C5866E_EB14_4363_8538789434DCA784'
        #new_list_uuid = '265377A5_9925_417A_811D701ADF8F5075'
        
        # test portal as student
        driver2 = webdriver.Chrome(config.CHROMEDRIVER_PATH, chrome_options=options)
        driver2.get(f'{config.URL_BASE}/portals/{portal_uuid}/view')
        driver2.find_element_by_id('loginUsername').send_keys(self.list_student['username'])
        driver2.find_element_by_id('loginPassword').send_keys(self.list_student['password'])
        driver2.find_element_by_id('login_button').click()
        time.sleep(1)
        test_utils.save_screenshot(driver2, 'portal_as_student')
        #driver2.get(f'{config.URL_BASE}/portals/{portal_uuid}/view') # HACK TO RENAVIGATE BECAUSE OF REDIRECT FAILURE?!?!?!
        #test_utils.save_screenshot(driver2, 'portal_as_student_after_renav')
        print(f"Testing portal {portal_uuid} as student with username {self.list_student['username']} password {self.list_student['password']}")
        
        _sid = self.list_student['username']
        text2 = test_utils.generate_random_string()
        
        ## check report counter is 1
        _elem = driver2.find_element_by_css_selector(f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}'] input.sres-report-toggler-current-display")
        assert "1" == _elem.get_property('value')
        _elem = driver2.find_element_by_css_selector(f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}'] span.sres-report-toggler-max-display")
        assert "1" == _elem.get_attribute('innerHTML')
        
        ## check and interact with slider
        time.sleep(0.5)
        print(driver2.find_element_by_id(f'{new_multientry_column_uuid_1}_0_{_sid}').get_property('value'))
        assert driver2.find_element_by_id(f'{new_multientry_column_uuid_1}_0_{_sid}').get_property('value') == '8' 
        _elem = driver2.find_elements_by_css_selector(f"div.sres-input-container[data-sres-identifier='{_sid}'][data-sres-columnuuid='{new_multientry_column_uuid_1}'] .irs-handle.single")[0]
        ActionChains(driver2).move_to_element(_elem).click(_elem).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).send_keys(Keys.RIGHT).pause(0.1).perform()
        print(driver2.find_element_by_id(f'{new_multientry_column_uuid_1}_0_{_sid}').get_property('value'))
        time.sleep(1)
        assert driver2.find_element_by_id(f'{new_multientry_column_uuid_1}_0_{_sid}').get_property('value') == '11' 
        
        ## interact with single dropdown - should be disabled
        _elem = driver2.find_element_by_css_selector(f"button[data-id='{new_multientry_column_uuid_1}_1_{_sid}']")
        _elem.click()
        assert test_utils.element_by_css_selector_contains_class(
            driver=driver2,
            selector=f"button[data-id='{new_multientry_column_uuid_1}_1_{_sid}']",
            class_name="disabled"
        )
        ## try enable this via a script and then change the value to 3 - this should be reverted by the server side
        driver2.execute_script(f"""
            $("button[data-id='{new_multientry_column_uuid_1}_1_{_sid}']").prop('disabled', false).selectpicker('refresh');
        """)
        _elem = driver2.find_element_by_css_selector(f"button[data-id='{new_multientry_column_uuid_1}_1_{_sid}']")
        ActionChains(driver2).move_to_element(_elem).click(_elem).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.DOWN).pause(0.2).send_keys(Keys.ENTER).perform()
        time.sleep(0.2)
        
        ## interact with regex
        test_utils.move_to_send_keys_element_by_id(
            driver=driver2,
            id=f'{new_multientry_column_uuid_1}_2_{_sid}',
            keys=Keys.CONTROL + 'a'
        )
        test_utils.move_to_send_keys_element_by_id(
            driver=driver2,
            id=f'{new_multientry_column_uuid_1}_2_{_sid}',
            keys=Keys.DELETE
        )
        test_utils.move_to_send_keys_element_by_id(
            driver=driver2,
            id=f'{new_multientry_column_uuid_1}_2_{_sid}',
            keys=text2
        )
        
        ## try to interact with multi buttons
        assert not test_utils.element_by_css_selector_is_enabled(
            driver=driver2,
            selector=f"button[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-value='w']"
        )
        ## try enable it via a script and then select it - this should be wiped on the server side
        driver2.execute_script(f"""
            $("button[data-sres-columnuuid='{new_multientry_column_uuid_1}']").prop('disabled', false);
        """)
        test_utils.move_to_click_element_by_css_selector(
            driver=driver2,
            selector=f"button[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-value='s']"
        )
        
        ## save everything
        test_utils.move_to_click_element_by_css_selector(driver2, f"button.sres-addvalue-btn-save.sres-addvalue-save[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}']")
        WebDriverWait(driver2, 5).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(driver2, 5).until(lambda x: f"Saved" in x.page_source)
        time.sleep(1)
        
        # check saved data
        _saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid_1, self.list_student['sid'])
        _saved_data = json.loads(_saved_data)
        print(_saved_data)
        assert _saved_data[0] == '11'
        assert _saved_data[1] == '2' # prior staff-set data
        assert _saved_data[2] == text2
        assert _saved_data[3] == []
        
        # refresh and check again
        driver2.refresh()
        
        ## check report counter is 1
        assert test_utils.element_by_css_selector_has_value_for_property(
            driver=driver2,
            selector=f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}'] input.sres-report-toggler-current-display",
            property_name='value',
            value='1'
        )
        assert test_utils.element_by_css_selector_has_value_for_attribute(
            driver=driver2,
            selector=f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}'] span.sres-report-toggler-max-display",
            attribute_name='innerHTML',
            value='1'
        )
        ## check textbox value
        assert test_utils.element_by_css_selector_has_value_for_property(
            driver=driver2,
            selector=f"[id='{new_multientry_column_uuid_1}_2_{_sid}']",
            property_name='value',
            value=text2
        )
        
        # try add a new record
        print('Adding a new record via the portal...')        
        
        ## click add record
        test_utils.move_to_click_element_by_css_selector(
            driver=driver2,
            selector='button.sres-report-toggler-new'
        )
        text3 = test_utils.generate_random_string() 
        
        ## type something
        test_utils.move_to_send_keys_element_by_css_selector(
            driver=driver2,
            selector=f"[id='{new_multientry_column_uuid_1}_2_{_sid}']",
            keys=text3
        )
        
        ## save everything
        test_utils.move_to_click_element_by_css_selector(
            driver=driver2,
            selector=f"button.sres-addvalue-btn-save.sres-addvalue-save[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}']"
        )
        WebDriverWait(driver2, 5).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(driver2, 5).until(lambda x: f"Saved" in x.page_source)
        time.sleep(1)
        
        ## check report number has incremented
        assert test_utils.element_by_css_selector_has_value_for_property(
            driver=driver2,
            selector=f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}'] input.sres-report-toggler-current-display",
            property_name='value',
            value='2'
        )
        assert test_utils.element_by_css_selector_has_value_for_attribute(
            driver=driver2,
            selector=f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}'] span.sres-report-toggler-max-display",
            attribute_name='innerHTML',
            value='2'
        )
        
        ## check saved data
        _saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid_1, self.list_student['sid'])
        _saved_data = json.loads(_saved_data)
        print(_saved_data)
        assert _saved_data[1] == '2' # prior staff-set data
        assert _saved_data[2] == text3
        assert _saved_data[3] == []
        
        # navigate to previous record and update it
        print('Navigating around records and updating...')
        
        test_utils.move_to_click_element_by_css_selector(
            driver=driver2,
            selector='button.sres-report-toggler-previous'
        )
        test_utils.save_screenshot(driver2, 'nav_to_prev_record1')
        WebDriverWait(driver2, 10).until(lambda x: not x.find_element_by_css_selector('.sres-report-toggler-spinner').is_displayed())
        test_utils.save_screenshot(driver2, 'nav_to_prev_record3')
        time.sleep(2)
        test_utils.save_screenshot(driver2, 'nav_to_prev_record4')
        
        ## check report number has changed
        assert test_utils.element_by_css_selector_has_value_for_property(
            driver=driver2,
            selector=f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}'] input.sres-report-toggler-current-display",
            property_name='value',
            value='1'
        )
        assert test_utils.element_by_css_selector_has_value_for_attribute(
            driver=driver2,
            selector=f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}'] span.sres-report-toggler-max-display",
            attribute_name='innerHTML',
            value='2'
        )
        
        ## update some data
        test_utils.save_screenshot(driver2, 'updating1')
        text4 = test_utils.generate_random_string()
        test_utils.move_to_send_keys_element_by_id(
            driver=driver2,
            id=f'{new_multientry_column_uuid_1}_2_{_sid}',
            keys=Keys.CONTROL + 'a'
        )
        test_utils.move_to_send_keys_element_by_id(
            driver=driver2,
            id=f'{new_multientry_column_uuid_1}_2_{_sid}',
            keys=Keys.DELETE
        )
        test_utils.save_screenshot(driver2, 'updating2')
        time.sleep(0.5)
        test_utils.move_to_send_keys_element_by_id(
            driver=driver2,
            id=f'{new_multientry_column_uuid_1}_2_{_sid}',
            keys=text4
        )
        test_utils.save_screenshot(driver2, 'updating3')
        
        ## save everything
        test_utils.move_to_click_element_by_css_selector(
            driver=driver2,
            selector=f"button.sres-addvalue-btn-save.sres-addvalue-save[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}']"
        )
        WebDriverWait(driver2, 5).until(lambda x: x.find_element_by_css_selector('.fa-circle-notch.spinning.sres-addvalue-btn-save-status').is_displayed())
        WebDriverWait(driver2, 5).until(lambda x: f"Saved" in x.page_source)
        time.sleep(5)
        
        ## check saved data
        _saved_data = test_utils.read_db_data_value(new_list_uuid, new_multientry_column_uuid_1, self.list_student['sid'])
        _saved_data = json.loads(_saved_data)
        print(_saved_data)
        assert _saved_data[2] == text4
        
        ## check report number has NOT changed
        assert test_utils.element_by_css_selector_has_value_for_property(
            driver=driver2,
            selector=f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}'] input.sres-report-toggler-current-display",
            property_name='value',
            value='1'
        )
        assert test_utils.element_by_css_selector_has_value_for_attribute(
            driver=driver2,
            selector=f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}'] span.sres-report-toggler-max-display",
            attribute_name='innerHTML',
            value='2'
        )
        
        # navigate back to record 2
        
        test_utils.save_screenshot(driver2, 'nav_to_next_record0')
        test_utils.move_to_click_element_by_css_selector(
            driver=driver2,
            selector='button.sres-report-toggler-next'
        )
        test_utils.save_screenshot(driver2, 'nav_to_next_record1')
        time.sleep(5)
        test_utils.save_screenshot(driver2, 'nav_to_next_record2')
        
        ## check report number has changed
        assert test_utils.element_by_css_selector_has_value_for_property(
            driver=driver2,
            selector=f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}'] input.sres-report-toggler-current-display",
            property_name='value',
            value='2'
        )
        assert test_utils.element_by_css_selector_has_value_for_attribute(
            driver=driver2,
            selector=f"div.sres-report-toggler-container[data-sres-columnuuid='{new_multientry_column_uuid_1}'][data-sres-identifier='{_sid}'] span.sres-report-toggler-max-display",
            attribute_name='innerHTML',
            value='2'
        )
        
        ## check data has updated
        assert test_utils.element_by_css_selector_has_value_for_property(
            driver=driver2,
            selector=f"[id='{new_multientry_column_uuid_1}_2_{_sid}']",
            property_name='value',
            value=text3
        )
        
        # done
        print('Portal testing complete.')
        
        driver2.quit()
        
        
        # delete portal
        # TODO
        
        # Delete list
        #test_list_crud.TestListCRUD._delete_list(self, _id)

if __name__ == '__main__':
    unittest.main()

